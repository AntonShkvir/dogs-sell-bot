from random import randint

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, MessageHandler, filters, CallbackContext, CallbackQueryHandler, CommandHandler, \
    ContextTypes

import json
import pickle
import config
from threading import Lock

lock = Lock()


class User:
    def __init__(self, user_id, current_state):
        self.user_id = user_id
        self.current_state = current_state
        self.dogs_to_sell = 0
        self.tons_to_buy = 0
        self.ref_of = ''
        self.balance = 0
        self.rand_num = 0
        self.first_review = False

    def to_dict(self):
        return {
            'user_id': self.user_id,
            'current_state': self.current_state,
            'dogs_to_sell': self.dogs_to_sell,
            'tons_to_buy': self.tons_to_buy,
            'ref_of': self.ref_of,
            'balance': self.balance,
            'first_review': self.first_review
        }


def load_file(f) -> list:
    try:
        with open(f, 'r', encoding='utf-8') as file:
            return list(json.load(file))
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def load_bot_values(file_path='bot_values.json'):
    with open(file_path, 'r') as file:
        bot_values = json.load(file)
    return bot_values


def save_bot_values(bot_values, file_path='bot_values.json'):
    with open(file_path, 'w') as file:
        json.dump(bot_values, file, indent=4)


def save(users_to_save):
    with lock:
        with open('users.pkl', 'wb') as pkl_file:
            pickle.dump(users_to_save, pkl_file)


def load():
    with lock:
        with open('users.pkl', 'rb') as pkl_file:
            loaded_users = pickle.load(pkl_file)
            return loaded_users


# users = {}
users = load()


async def cancel_dogs(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    rand = job.data[0]
    global users
    num_to_check = users[job.data[1]].rand_num
    if num_to_check == rand:
        users[job.data[1]].dogs_to_sell = 0
        users[job.data[1]].current_state = 'started'
        if users[job.data[1]].rand_num != 0:
            await context.bot.send_animation(chat_id=job.data[1], animation='animations/forgot_dogs.mp4',
                                             caption='–í—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É DOGS. –í—ã–±–µ—Ä–∏ \"–ü—Ä–æ–¥–∞—Ç—å DOGS\" —Å–Ω–æ–≤–∞ –∏ —Å–ª–µ–¥—É–π —É–∫–∞–∑–∞–Ω–∏—è–º –æ—Ç –±–æ—Ç–∞')


async def check(update: Update, context: CallbackContext):
    admins = load_file('admins.json')

    if update.effective_chat.id in admins:
        bot_values = load_bot_values()
        text = ''
        for i in bot_values.keys():
            s = f"{i} = {bot_values[i]}\n"
            text += s
        await context.bot.send_message(update.effective_chat.id, text=text, disable_web_page_preview=True)


async def start(update: Update, context: CallbackContext):
    bot_values = load_bot_values()
    is_in_grp = await context.bot.get_chat_member(chat_id=bot_values["group"], user_id=update.effective_message.chat_id)
    if is_in_grp.status in ['member', 'creator', 'administrator']:
        keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                    [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                    [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
        if update.effective_chat.id not in users:
            users[update.effective_chat.id] = User(update.effective_chat.id, 'started')
            ref_id = update.message.text[7:]
            if not ref_id == '':
                users[update.effective_chat.id].ref_of = int(ref_id)
        else:
            users[update.effective_chat.id].current_state = 'started'
            save(users)
        await context.bot.send_message(update.effective_chat.id,
                                       text=f"–ü—Ä–∏–≤–µ—Ç. –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã \"DOGS\". –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ –ø—Ä–æ–¥–∞–∂–µ –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. \n\n–û—Ç–∑—ã–≤—ã: [—Ç—É—Ç]({bot_values['link_for_reviews']})",
                                       reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                        one_time_keyboard=True),
                                       parse_mode=ParseMode.MARKDOWN)
    else:
        if update.effective_chat.id not in users:
            users[update.effective_chat.id] = User(update.effective_chat.id, 'not started')
            ref_id = update.message.text[7:]
            if not ref_id == '':
                users[update.effective_chat.id].ref_of = int(ref_id)
        else:
            users[update.effective_chat.id].current_state = 'not started'
            save(users)
        keyboard = [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=bot_values['link_for_group'])]]
        await context.bot.send_message(update.effective_chat.id,
                                       text="–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª –¥–ª—è —Å–≤—è–∑–∏",
                                       reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_private_messages(update: Update, context: CallbackContext):
    text = update.message.text
    bot_values = load_bot_values()
    if users[update.effective_chat.id].current_state == 'not started':
        keyboard = [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=bot_values['link_for_group'])]]
        await context.bot.send_message(update.effective_chat.id,
                                       text="–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª –¥–ª—è —Å–≤—è–∑–∏",
                                       reply_markup=InlineKeyboardMarkup(keyboard))
        return 0
    if update.message.text and update.effective_chat.id in [5276000599, 836446595, 506712122] and text.count('=') == 1:
        replaced_text = update.message.text.replace(' ', '')
        delimeter = replaced_text.find("=")
        key = replaced_text[0:delimeter]
        if key in bot_values.keys():
            bot_values[key] = replaced_text[delimeter + 1:]
            save_bot_values(bot_values)
            await context.bot.send_message(update.effective_chat.id, text="–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        else:
            await context.bot.send_message(update.effective_chat.id, text="–ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞")

    if users[update.effective_chat.id].current_state == 'send_screen':
        if not update.message.document and not update.message.video and not update.message.photo:
            keyboard = []
            admins = load_file('admins.json')
            for i in admins:
                try:
                    keyboard.append(
                        [InlineKeyboardButton(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {admins.index(i) + 1}",
                                              url=f"tg://user?id={i}")])
                except Exception as e:
                    print(e)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç\\–∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–≤–æ–¥–∞ DOGS. –ï—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–µ—Ä–µ–≤–æ–¥–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.',
                                           reply_markup=InlineKeyboardMarkup(keyboard))
            return 0

    if users[update.effective_chat.id].current_state == 'input_dogs':
        if text.isdigit() and float(text) > 0:
            users[update.effective_chat.id].dogs_to_sell = float(text)
            users[update.effective_chat.id].current_state = 'confirm_dogs'
            keyboard = [[KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")]]
            await update.message.reply_text(
                f"üßê –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å *{text} DOGS*?\n(—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!)",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
                parse_mode=ParseMode.MARKDOWN)
            num = randint(1, 99999)
            users[update.effective_chat.id].rand_num = num if users[update.effective_chat.id].rand_num != num else \
                users[update.effective_chat.id].rand_num + randint(1, 99999)

            context.job_queue.run_once(cancel_dogs, 10 * 60, chat_id=update.effective_chat.id,
                                       data=[users[update.effective_chat.id].rand_num, update.effective_chat.id])

        else:
            await update.message.reply_text(f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —á–∏—Å–ª–æ")

    elif users[update.effective_chat.id].current_state == 'leave first comment':
        if text == "–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤":
            keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                        [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                        [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
            users[update.effective_chat.id].current_state = 'started'
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–ü—Ä–∏–≤–µ—Ç. –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã \"DOGS\". –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ –ø—Ä–æ–¥–∞–∂–µ –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. \n\n–û—Ç–∑—ã–≤—ã: [—Ç—É—Ç]({bot_values['link_for_reviews']})",
                                           reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                            one_time_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)
        else:
            id = update.effective_chat.id
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")],
                        [InlineKeyboardButton("‚úÖ", callback_data=f"yes to first|{id}"),
                         InlineKeyboardButton("‚ùå", callback_data=f"no to first|{id}")]]

            keyboard = InlineKeyboardMarkup(keyboard)
            print(update.effective_chat.id)

            msg = update.message
            if msg.document:
                fileID = msg.document.file_id
                if msg.caption:
                    await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                    reply_markup=keyboard,
                                                    caption=msg.caption)
                else:
                    await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                    reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))
                users[update.effective_chat.id].current_state = 'sent_comment'

            elif msg.photo:

                fileID = msg.photo[-1].file_id
                if msg.caption:
                    await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard,
                                                 caption=msg.caption)
                else:
                    await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))
                users[update.effective_chat.id].current_state = 'sent_comment'


            elif msg.video:
                fileID = msg.video.file_id
                if msg.caption:
                    await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard,
                                                 caption=msg.caption)

                else:
                    await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'
            elif msg.text:
                await context.bot.send_message(bot_values["chat_2"], text=msg.text, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'
            elif msg.voice:
                await context.bot.send_voice(bot_values["chat_2"], voice=msg.voice, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'
            elif msg.video_note:
                await context.bot.send_video_note(bot_values["chat_2"], video_note=msg.video_note,
                                                  reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'
            users[update.effective_chat.id].first_review = True



    elif users[update.effective_chat.id].current_state == 'leave comment':
        if text == "–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤":
            keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                        [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                        [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
            users[update.effective_chat.id].current_state = 'started'
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–ü—Ä–∏–≤–µ—Ç. –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã \"DOGS\". –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ –ø—Ä–æ–¥–∞–∂–µ –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. \n\n–û—Ç–∑—ã–≤—ã: [—Ç—É—Ç]({bot_values['link_for_reviews']})",
                                           reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                            one_time_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)
        else:
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={update.effective_chat.id}")]]
            keyboard = InlineKeyboardMarkup(keyboard)
            msg = update.message
            if msg.document:
                fileID = msg.document.file_id
                if msg.caption:
                    await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                    reply_markup=keyboard,
                                                    caption=msg.caption)
                else:
                    await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                    reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))
                users[update.effective_chat.id].current_state = 'sent_comment'

            elif msg.photo:

                fileID = msg.photo[-1].file_id
                if msg.caption:
                    await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard,
                                                 caption=msg.caption)
                else:
                    await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))
                users[update.effective_chat.id].current_state = 'sent_comment'


            elif msg.video:
                fileID = msg.video.file_id
                if msg.caption:
                    await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard,
                                                 caption=msg.caption)

                else:
                    await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'
            elif msg.text:
                await context.bot.send_message(bot_values["chat_2"], text=msg.text, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'
            elif msg.voice:
                await context.bot.send_voice(bot_values["chat_2"], voice=msg.voice, reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'
            elif msg.video_note:
                await context.bot.send_video_note(bot_values["chat_2"], video_note=msg.video_note,
                                                  reply_markup=keyboard)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                          callback_data='go to begin')]]))

                users[update.effective_chat.id].current_state = 'sent_comment'

    elif users[update.effective_chat.id].current_state == 'cancel and send comment':
        keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={update.effective_chat.id}")]]
        keyboard = InlineKeyboardMarkup(keyboard)
        msg = update.message
        if msg.document:
            fileID = msg.document.file_id
            if msg.caption:
                await context.bot.send_document(bot_values["chat_3"], document=fileID,
                                                reply_markup=keyboard,
                                                caption=msg.caption)
            else:
                await context.bot.send_document(bot_values["chat_3"], document=fileID,
                                                reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'commented'

        elif msg.photo:

            fileID = msg.photo[-1].file_id
            if msg.caption:
                await context.bot.send_photo(bot_values["chat_3"], photo=fileID, reply_markup=keyboard,
                                             caption=msg.caption)
            else:
                await context.bot.send_photo(bot_values["chat_3"], photo=fileID, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'commented'


        elif msg.video:
            fileID = msg.video.file_id
            if msg.caption:
                await context.bot.send_video(bot_values["chat_3"], video=fileID, reply_markup=keyboard,
                                             caption=msg.caption)

            else:
                await context.bot.send_video(bot_values["chat_3"], video=fileID, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'commented'
        elif msg.text:
            await context.bot.send_message(bot_values["chat_3"], text=msg.text, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'commented'
        elif msg.voice:
            await context.bot.send_voice(bot_values["chat_3"], voice=msg.voice, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'commented'
        elif msg.video_note:
            await context.bot.send_video_note(bot_values["chat_3"], video_note=msg.video_note, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'commented'

    elif users[update.effective_chat.id].current_state == 'buy_ton':
        keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={update.effective_chat.id}")]]
        keyboard = InlineKeyboardMarkup(keyboard)
        print(update.effective_chat.id)
        msg = update.message
        if msg.document:
            fileID = msg.document.file_id
            if msg.caption:
                await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                reply_markup=keyboard,
                                                caption=msg.caption)
            else:
                await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'bought_ton'

        elif msg.photo:

            fileID = msg.photo[-1].file_id
            if msg.caption:
                await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard,
                                             caption=msg.caption)
            else:
                await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'bought_ton'


        elif msg.video:
            fileID = msg.video.file_id
            if msg.caption:
                await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard,
                                             caption=msg.caption)

            else:
                await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'bought_ton'
        elif msg.text:
            await context.bot.send_message(bot_values["chat_2"], text=msg.text, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'bought_ton'
        elif msg.voice:
            await context.bot.send_voice(bot_values["chat_2"], voice=msg.voice, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'bought_ton'
        elif msg.video_note:
            await context.bot.send_video_note(bot_values["chat_2"], video_note=msg.video_note, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'bought_ton'


    elif users[update.effective_chat.id].current_state == 'help of manager':
        keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={update.effective_chat.id}")]]
        keyboard = InlineKeyboardMarkup(keyboard)
        msg = update.message
        if msg.document:
            fileID = msg.document.file_id
            if msg.caption:
                await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                reply_markup=keyboard,
                                                caption=msg.caption)
            else:
                await context.bot.send_document(bot_values["chat_2"], document=fileID,
                                                reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'confirmed_dogs'

        elif msg.photo:

            fileID = msg.photo[-1].file_id
            if msg.caption:
                await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard,
                                             caption=msg.caption)
            else:
                await context.bot.send_photo(bot_values["chat_2"], photo=fileID, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'confirmed_dogs'


        elif msg.video:
            fileID = msg.video.file_id
            if msg.caption:
                await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard,
                                             caption=msg.caption)

            else:
                await context.bot.send_video(bot_values["chat_2"], video=fileID, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'confirmed_dogs'
        elif msg.text:
            await context.bot.send_message(bot_values["chat_2"], text=msg.text, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'confirmed_dogs'
        elif msg.voice:
            await context.bot.send_voice(bot_values["chat_2"], voice=msg.voice, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'confirmed_dogs'
        elif msg.video_note:
            await context.bot.send_video_note(bot_values["chat_2"], video_note=msg.video_note, reply_markup=keyboard)
            await context.bot.send_message(update.effective_chat.id,
                                           text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'confirmed_dogs'



    elif users[update.effective_chat.id].current_state == 'confirm_dogs':

        users[update.effective_chat.id].current_state = 'confirmed_dogs'
        current_price = "{:.4f}".format(1 / float(bot_values['DOGS'])).rstrip('0').rstrip('.')
        formatted_number = "{:.4f}".format(
            float(users[update.effective_chat.id].dogs_to_sell) / float(current_price)).rstrip('0').rstrip('.')
        keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å")]]
        await update.message.reply_animation(animation='animations/currency.mp4',
                                             caption=f"‚ö°Ô∏è –ü–æ –∫—É—Ä—Å—É: *1 USDT = {current_price} DOGS*\nüíé –ü–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –≤–∞—à–∏ *{users[update.effective_chat.id].dogs_to_sell} DOGS* —ç—Ç–æ *{formatted_number} USDT*\n\n(–∫—É—Ä—Å DOGS –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)",
                                             parse_mode=ParseMode.MARKDOWN,
                                             reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                              one_time_keyboard=True))

    elif users[update.effective_chat.id].current_state == 'send_screen':
        msg = update.message
        keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={update.effective_chat.id}")], [
            InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f'confirm_payment|{update.effective_chat.id}')]]
        keyboard = InlineKeyboardMarkup(keyboard)
        if msg.document:
            fileID = msg.document.file_id
            if msg.caption:
                await context.bot.send_document(bot_values["chat_1"], document=fileID,
                                                reply_markup=keyboard,
                                                caption=msg.caption + f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª {users[update.effective_chat.id].dogs_to_sell} DOGS')
            else:
                await context.bot.send_document(bot_values["chat_1"], document=fileID,
                                                reply_markup=keyboard,
                                                caption=f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª {users[update.effective_chat.id].dogs_to_sell} DOGS')
            await context.bot.send_message(update.effective_chat.id,
                                           text='–í—Å—ë —Å—É–ø–µ—Ä. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–±—ã—á–Ω–æ –æ—Ç 10 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à—ë–Ω, —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –Ω–∞–º–∏, –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
                                                                                                    callback_data='help of manager')],
                                                                              [InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'confirmed_dogs'


        elif msg.photo:
            fileID = msg.photo[-1].file_id
            if msg.caption:
                await context.bot.send_photo(bot_values["chat_1"], photo=fileID, reply_markup=keyboard,
                                             caption=msg.caption + f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª {users[update.effective_chat.id].dogs_to_sell} DOGS')
            else:
                await context.bot.send_photo(bot_values["chat_1"], photo=fileID, reply_markup=keyboard,
                                             caption=f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª {users[update.effective_chat.id].dogs_to_sell} DOGS')
            await context.bot.send_message(update.effective_chat.id,
                                           text='–í—Å—ë —Å—É–ø–µ—Ä. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–±—ã—á–Ω–æ –æ—Ç 10 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à—ë–Ω, —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –Ω–∞–º–∏, –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
                                                                                                    callback_data='help of manager')],
                                                                              [InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))

            users[update.effective_chat.id].current_state = 'confirmed_dogs'




        elif msg.video:
            fileID = msg.video.file_id
            if msg.caption:
                await context.bot.send_video(bot_values["chat_1"], video=fileID, reply_markup=keyboard,
                                             caption=msg.caption + f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª {users[update.effective_chat.id].dogs_to_sell} DOGS')

            else:
                await context.bot.send_video(bot_values["chat_1"], video=fileID, reply_markup=keyboard,
                                             caption=f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª {users[update.effective_chat.id].dogs_to_sell} ODGS')
            await context.bot.send_message(update.effective_chat.id,
                                           text='–í—Å—ë —Å—É–ø–µ—Ä. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–±—ã—á–Ω–æ –æ—Ç 10 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à—ë–Ω, —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –Ω–∞–º–∏, –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤',
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
                                                                                                    callback_data='help of manager')],
                                                                              [InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É',
                                                                                                    callback_data='go to begin')]]))
            users[update.effective_chat.id].current_state = 'confirmed_dogs'



        else:
            await update.message.reply_text('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/–∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–≤–æ–¥–∞')

        save(users)

    if text == "–ü—Ä–æ–¥–∞—Ç—å DOGS":
        await update.message.reply_text(
            "ü§ë *–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOGS, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å.*\n –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.MARKDOWN)
        users[update.effective_chat.id].current_state = 'input_dogs'
    elif text == "–î–∞, —è —É–≤–µ—Ä–µ–Ω":
        keyboard = [[KeyboardButton("–°–¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")]]
        await context.bot.send_animation(chat_id=update.effective_chat.id, animation='animations/okay_continue.mp4',
                                         caption=f"*–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º.*\n–°–∫–∏–¥—ã–≤–∞—é –≤–∞–º —Ä–µ–∫–≤–∏–∑–∏—Ç, –∫—É–¥–∞ –∫–∏–¥–∞—Ç—å —Å–≤–æ–∏ DOGS\n\n‚ö†Ô∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ *—Å–∫—Ä–∏–Ω—à–æ—Ç/–∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–≤–æ–¥–∞.* –í—ã –¥–æ–ª–∂–Ω—ã *—Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞*, –∏–Ω–∞—á–µ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –≤–∞—à–µ –º–µ—Å—Ç–æ –∑–∞–π–º—É—Ç –¥—Ä—É–≥–∏–µ! \n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ DOGS: {bot_values["link_for_telegraph"]}\n\n\n–ê–¥—Ä–µ—Å:\nEQDD8dqOzaj4zUK6ziJOo_G2lx6qf1TEktTRkFJ7T1c_fPQb\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n10146109",
                                         reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                          one_time_keyboard=True),
                                         parse_mode=ParseMode.MARKDOWN)

    elif text == "–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç TON":
        keyboard = [[KeyboardButton("–í–∑—è—Ç—å TON –≤ –∑–∞–π–º")]]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, TON –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏. –ö–æ–º–∏—Å—Å–∏—è –Ω–µ–±–æ–ª—å—à–∞—è, —ç—Ç–æ —É—Å–ª–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å. –í–∞–º –≤–µ—Ä–Ω—É—Ç –¥–µ–Ω—å–≥–∏ –≤–º–µ—Å—Ç–µ —Å DOGS\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –≤–∑—è—Ç—å TON —É –Ω–∞—Å –≤ –∑–∞–π–º, *–±–µ—Å–ø–ª–∞—Ç–Ω–æ*',
                                       parse_mode=ParseMode.MARKDOWN,
                                       reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                        one_time_keyboard=True))

    elif text == "–í–∑—è—Ç—å TON –≤ –∑–∞–π–º":
        keyboard = [[KeyboardButton("–£ –º–µ–Ω—è –±–∞–Ω –≤ Telegram"), KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É")]]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å TON, –æ—Ç–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n@dogscoin_sell\n@dogscoin_sell\n@dogscoin_sell\n\n(–ø—Ä–æ—à—É –ø–∏—Å–∞—Ç—å –ø–æ –¥–µ–ª—É, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –∏ —Å–ø–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –¥–µ–ª–∞—Ç—å –≤—Å—ë –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ)',
                                       reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                        one_time_keyboard=True))

    elif text == '–í—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å':
        if float(users[update.effective_chat.id].balance) >= float(bot_values['min_balance']):
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={update.effective_chat.id}")], [
                InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f'confirm_balance|{update.effective_chat.id}')]]
            await context.bot.send_message(chat_id=bot_values["chat_1"],
                                           text=f'–Æ–∑–µ—Ä –∂–µ–ª–∞–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å ({users[update.effective_chat.id].balance}$)',
                                           reply_markup=InlineKeyboardMarkup(keyboard))
            users[update.effective_chat.id].balance = 0
            save(users)
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text=f"–î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–º–µ—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ–ª—å—à–µ {bot_values['min_balance']}$")


    elif text == "–ú–æ–π –ë–∞–ª–∞–Ω—Å":
        keyboard = [[KeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å"), KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")],
                    [KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É")]]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {users[update.effective_chat.id].balance}$",
                                       reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                        one_time_keyboard=True))

    elif text == "–£ –º–µ–Ω—è –±–∞–Ω –≤ Telegram":
        keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                    [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                    [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text='–ú—ã –≤–∞—Å —É—Å–ª—ã—à–∞–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –ø–µ—Ä–≤—ã–º–∏!\n@dogscoin_sell',
                                       reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                        one_time_keyboard=True))

    elif text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É":
        users[update.effective_chat.id].current_state = 'started'
        keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                    [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                    [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
        await context.bot.send_message(update.effective_chat.id,
                                       text=f"–ü—Ä–∏–≤–µ—Ç. –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã \"DOGS\". –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ –ø—Ä–æ–¥–∞–∂–µ –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. \n\n–û—Ç–∑—ã–≤—ã: [—Ç—É—Ç]({bot_values['link_for_reviews']})",
                                       reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                        one_time_keyboard=True),
                                       parse_mode=ParseMode.MARKDOWN)

    elif text == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤":
        me = await context.bot.get_me()
        keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                    [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                    [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]

        await context.bot.send_message(update.effective_chat.id,
                                       text=f"üí∏ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 10% –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏ —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞! \n–ü–æ–¥–∫–ª—é—á–∞–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: \n\nhttps://t.me/{me.username}?start={update.effective_message.chat_id}",
                                       reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True,
                                                                        resize_keyboard=True))

    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É":
        if float(users[update.effective_chat.id].dogs_to_sell) > 0:
            current_price = "{:.4f}".format(1 / float(bot_values['DOGS'])).rstrip('0').rstrip('.')
            formatted_number = "{:.4f}".format(
                float(users[update.effective_chat.id].dogs_to_sell) / float(current_price)).rstrip('0').rstrip('.')
            keyboard = [[KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–¥–µ–ª–∫—É"), KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É!")]]
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å {formatted_number} USDT? \n\n–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞—Ç—å DOGS –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ. –û–±–¥—É–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑",
                                           reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                            one_time_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)
    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É!":
        if float(users[update.effective_chat.id].dogs_to_sell) > 0:
            users[update.effective_chat.id].dogs_to_sell = 0
            users[update.effective_chat.id].rand_num = 0
            keyboard = [[InlineKeyboardButton("–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤", callback_data="no comment")]]
            await context.bot.send_message(update.effective_chat.id,
                                           text='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫—Ä–∞—Ç—Ü–µ, –ø–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É?\n\n–í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å! –°–ø–∞—Å–∏–±–æ!',
                                           reply_markup=InlineKeyboardMarkup(keyboard))
            users[update.effective_chat.id].current_state = 'cancel and send comment'
    elif text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–¥–µ–ª–∫—É":
        if float(users[update.effective_chat.id].dogs_to_sell) > 0:
            keyboard = [[KeyboardButton("–°–¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")]]
            await context.bot.send_animation(chat_id=update.effective_chat.id, animation='animations/okay_continue.mp4',
                                             caption=f"*–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º.*\n–°–∫–∏–¥—ã–≤–∞—é –≤–∞–º —Ä–µ–∫–≤–∏–∑–∏—Ç, –∫—É–¥–∞ –∫–∏–¥–∞—Ç—å —Å–≤–æ–∏ DOGS\n\n‚ö†Ô∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ *—Å–∫—Ä–∏–Ω—à–æ—Ç/–∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–≤–æ–¥–∞.* –í—ã –¥–æ–ª–∂–Ω—ã *—Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞*, –∏–Ω–∞—á–µ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –≤–∞—à–µ –º–µ—Å—Ç–æ –∑–∞–π–º—É—Ç –¥—Ä—É–≥–∏–µ! \n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ DOGS: https://example/com\n\n\n–ê–¥—Ä–µ—Å:\nEQDD8dqOzaj4zUK6ziJOo_G2lx6qf1TEktTRkFJ7T1c_fPQb\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n10146109",
                                             reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                              one_time_keyboard=True),
                                             parse_mode=ParseMode.MARKDOWN)


    elif text == '+40':
        users[update.effective_chat.id].balance += 40

    elif text == "–°–¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
        if float(users[update.effective_chat.id].dogs_to_sell) > 0:
            users[update.effective_chat.id].current_state = 'send_screen'
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–û—Ç–ª–∏—á–Ω–æ, –≤—Ä–æ–¥–µ –±—ã –≤–∏–∂—É –∫–∞–∫–æ–π-—Ç–æ –ø–µ—Ä–µ–≤–æ–¥, –Ω–æ –æ—Ç –≤–∞—Å –ª–∏ –æ–Ω?\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≤–∏–¥–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞/–∑–∞–ø–∏—Å–∏",
                                           parse_mode=ParseMode.MARKDOWN)

    elif text == "–ü—Ä–æ–¥–∞—Ç—å":
        if float(users[update.effective_chat.id].dogs_to_sell) > 0:
            current_price = "{:.4f}".format(1 / float(bot_values['DOGS'])).rstrip('0').rstrip('.')
            formatted_number = "{:.4f}".format(
                float(users[update.effective_chat.id].dogs_to_sell) / float(current_price)).rstrip('0').rstrip('.')
            keyboard = [[KeyboardButton("–î–∞, —è —É–≤–µ—Ä–µ–Ω"), KeyboardButton("–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç TON")],
                        [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")]]
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–û—Ç–ª–∏—á–Ω–æ. –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ DOGS –Ω–∞ —ç—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —Å–µ—Ç–∏ \"TON\". \n\n*–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {users[update.effective_chat.id].dogs_to_sell} DOGS –∏ –ø–æ–ª—É—á–∏—Ç—å {formatted_number} USDT?*\n\n–ü—Ä–∏–º–µ—á–µ–Ω–∏–µ: (–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞)",
                                           reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                            one_time_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)


    elif text == "–ö—É–ø–∏—Ç—å TON":
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text='–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å TON, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã')
        users[update.effective_chat.id].current_state = 'buy_ton'


    elif text == "–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞":
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_to_start')]])
        await context.bot.send_animation(chat_id=update.effective_chat.id, animation='animations/tell_us.mp4',
                                         caption='üññ –û–ø–∏—à–∏—Ç–µ, *–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è*, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å *–±—ã—Å—Ç—Ä–µ–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ —Å–∫–æ—Ä–µ–µ –∫ —Ä–µ—à–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞*, —Ç–µ–º —Å–∞–º—ã–º —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ‚è≥',
                                         reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

        users[update.effective_chat.id].current_state = 'leave comment'

    elif text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        keyboard = [[KeyboardButton("–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤")]]
        if not users[update.effective_chat.id].first_review:
            await context.bot.send_animation(chat_id=update.effective_chat.id, animation='animations/first_review.mp4',
                                             caption='üåü *–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤* - –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–ø–µ–µ—á–∫—É –≤ –ø–æ–¥–∞—Ä–æ–∫ üí∏',
                                             parse_mode=ParseMode.MARKDOWN,
                                             reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True,
                                                                              resize_keyboard=True))
            users[update.effective_chat.id].current_state = 'leave first comment'

        else:
            await context.bot.send_animation(chat_id=update.effective_chat.id, animation='animations/tell_us.mp4',
                                             caption='–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ –ø–æ–≤–æ–¥—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –ë—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—Å!',
                                             reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True,
                                                                              resize_keyboard=True))
            users[update.effective_chat.id].current_state = 'leave comment'


async def handle_buttons(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    bot_values = load_bot_values()

    await query.answer()
    if str(query.message.chat.id) in [bot_values["chat_1"], bot_values["chat_2"], bot_values["chat_3"]]:
        if 'confirm_payment' in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")],
                        [InlineKeyboardButton("‚úÖ", callback_data=f'confirm|{id}'),
                         InlineKeyboardButton("‚ùå", callback_data=f'decline|{id}')]]
            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)

        elif 'confirm' in query.data and 'confirm_payment' not in query.data and 'balance' not in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")]]
            if users[id].ref_of != '':
                sum = (float(users[id].dogs_to_sell) * 0.2) * 0.1
                current_price = "{:.4f}".format(1 / float(bot_values['DOGS'])).rstrip('0').rstrip('.')
                sum = sum / float(current_price)
                users[users[id].ref_of].balance += sum
                users[users[id].ref_of].balance = float("{:.4f}".format(
                    users[users[id].ref_of].balance).rstrip('0').rstrip('.'))
            users[id].dogs_to_sell = 0
            users[id].rand_num = 0

            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)


        elif 'decline' in query.data and 'balance' not in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")], [
                InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f'confirm_payment|{id}')]]

            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)

        elif 'confirm_balance' in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")],
                        [InlineKeyboardButton("‚úÖ", callback_data=f'balance_confirm|{id}'),
                         InlineKeyboardButton("‚ùå", callback_data=f'balance_decline|{id}')]]
            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)
        elif 'balance_confirm' in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")]]
            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)
        elif 'balance_decline' in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")], [
                InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f'confirm_payment|{id}')]]

            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)

        elif 'yes to first' in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            users[id].balance += 1
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")],
                        [InlineKeyboardButton("–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ", callback_data=' ')]]
            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)
        elif 'no to first' in query.data:
            id = int(query.data.split('|', maxsplit=1)[1])
            users[id].first_review = False
            keyboard = [[InlineKeyboardButton("–¢–∏–ø–∞ —Ç–∏–ø", url=f"tg://user?id={id}")],
                        [InlineKeyboardButton("–ù–µ –æ–¥–æ–±—Ä–µ–Ω–æ ‚ùå", callback_data=' ')]]
            await context.bot.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard),
                                                        message_id=query.message.message_id,
                                                        chat_id=query.message.chat.id)



    else:
        if users[query.from_user.id].current_state == 'send_screen':
            if not update.message.document or not update.message.video or not update.message.photo:
                keyboard = []
                admins = load_file('admins.json')

                for i in admins:
                    try:
                        keyboard.append([InlineKeyboardButton(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {admins.index(i) + 1}",
                                                              url=f"tg://user?id={i}")])
                    except Exception as e:
                        print(e)
                await context.bot.send_message(update.effective_chat.id,
                                               text='–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç\\–∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–≤–æ–¥–∞ DOGS. –ï—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–µ—Ä–µ–≤–æ–¥–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.',
                                               reply_markup=InlineKeyboardMarkup(keyboard))
                return 0

        if query.data == 'help of manager':
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]])
            await context.bot.send_message(chat_id=query.from_user.id,
                                           text='–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤–∫—Ä–∞—Ç—Ü–µ, —á—Ç–æ–±—ã –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–≥–ª–∞ –≤–∞–º –µ—ë —Ä–µ—à–∏—Ç—å',
                                           reply_markup=keyboard)
            users[query.from_user.id].current_state = 'help of manager'


        elif query.data == 'cancel_to_start':
            await context.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id,
                                                        reply_markup=None)
            users[query.from_user.id].current_state = 'canceled'
            keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                        [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                        [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–ü—Ä–∏–≤–µ—Ç. –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã \"DOGS\". –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ –ø—Ä–æ–¥–∞–∂–µ –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. \n\n–û—Ç–∑—ã–≤—ã: [—Ç—É—Ç]({bot_values['link_for_reviews']})",
                                           reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                            one_time_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'cancel first':
            if not users[update.effective_chat.id].first_review:
                users[update.effective_chat.id].first_review = True
            await context.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id,
                                                        reply_markup=None)
            users[query.from_user.id].current_state = 'canceled'
            keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                        [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                        [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–ü—Ä–∏–≤–µ—Ç. –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã \"DOGS\". –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ –ø—Ä–æ–¥–∞–∂–µ –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. \n\n–û—Ç–∑—ã–≤—ã: [—Ç—É—Ç]({bot_values['link_for_reviews']})",
                                           reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                            one_time_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)


        elif query.data == 'cancel':
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton('–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data='help of manager')],
                 [InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É', callback_data='go to begin')]]))
            users[query.from_user.id].current_state = 'confirmed_dogs'
        elif query.data == 'go to begin':
            users[update.effective_chat.id].current_state = 'started'
            keyboard = [[KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å DOGS"), KeyboardButton("–ö—É–ø–∏—Ç—å TON")],
                        [KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"), KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                        [KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å")]]
            await context.bot.send_message(update.effective_chat.id,
                                           text=f"–ü—Ä–∏–≤–µ—Ç. –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã \"DOGS\". –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ –ø—Ä–æ–¥–∞–∂–µ –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. \n\n–û—Ç–∑—ã–≤—ã: [—Ç—É—Ç]({bot_values['link_for_reviews']})",
                                           reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                            one_time_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'no comment':
            keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É", callback_data='go to begin')]]
            await context.bot.edit_message_reply_markup(query.message.chat.id, query.message.message_id,
                                                        reply_markup=InlineKeyboardMarkup(keyboard))
            users[update.effective_chat.id].current_state = 'declined comment'


api_token = config.API_TOKEN
application = Application.builder().token(api_token).build()
application.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE))
application.add_handler(CommandHandler("check", check, filters=filters.ChatType.PRIVATE))
application.add_handler(MessageHandler(filters.ChatType.PRIVATE, handle_private_messages))
application.add_handler(CallbackQueryHandler(handle_buttons))

application.run_polling()
